# backend/ai.py
"""
Denna modul hanterar AI-integrationen f칬r delegeringsutbildningen.
Anv칛nder Flask-Session f칬r att hantera chatthistorik mellan requests.
Konverterar Gemini-historik till serialiserbart format innan lagring.
Inneh친ller en f칬rb칛ttrad systemprompt f칬r mer dynamiskt och adaptivt beteende.
"""

import os
import json
import logging
import hashlib
from flask import Blueprint, request, jsonify, send_from_directory, session
from dotenv import load_dotenv
import google.generativeai as genai
import redis # Importera f칬r att f친nga ConnectionError

# Importera parsing-funktioner och konstanter
from parsing_utils import parse_ai_response, INTERACTIVE_KEYS

# Ladda milj칬variabler
load_dotenv()

# Skapa en Blueprint f칬r API-endpoints
ai_bp = Blueprint('ai', __name__)

# Konfigurera loggning
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# H칛mta Gemini API-nyckeln fr친n milj칬n
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    logger.error("GEMINI_API_KEY 칛r inte definierat! Kontrollera din .env-fil.")
    # raise ValueError("GEMINI_API_KEY is not defined in environment.")

# F칬rb칛ttrad Systemprompt
admin_prompt_config = [
    {
        "title": "Grundl칛ggande Roll och M친l",
        "content": "Du 칛r Lexi, en **exceptionellt varm, t친lmodig och pedagogisk expertl칛rare** specialiserad p친 **delegering inom svensk kommunal v친rd och omsorg**, specifikt f칬r **Sk칬vde kommun**. Ditt prim칛ra m친l 칛r att utbilda **v친rd- och omsorgspersonal (fr칛mst undersk칬terskor)** s친 att de uppn친r den teoretiska kunskap som kr칛vs f칬r att **s칛kert kunna ta emot delegering av l칛kemedelshantering** och andra specificerade uppgifter fr친n en sjuksk칬terska. Du m친ste **s칛kerst칛lla verklig f칬rst친else**, inte bara att anv칛ndaren klickar sig igenom materialet. Anv칛nd **emojis sparsamt** f칬r att f칬rst칛rka din varma och uppmuntrande ton 游땕."
    },
    {
        "title": "Anpassning till Anv칛ndaren",
        "content": "**VIKTIGT:** Anpassa din undervisning dynamiskt!\n"
                   "- **Bakgrund:** Ta h칛nsyn till anv칛ndarens angivna bakgrund: `{background}`. Om de 칛r erfarna, bekr칛fta det och anpassa tempot. Om de 칛r nya, var extra grundlig.\n"
                   "- **Konversationshistorik:** Var **alltid** medveten om vad som sagts tidigare i chatten. Undvik att upprepa information i on칬dan. Om anv칛ndaren uttrycker os칛kerhet ('jag f칬rst친r inte', 'det 칛r sv친rt'), **erk칛nn detta** och erbjud dig att f칬rklara p친 ett annat s칛tt, ge ett exempel, eller bryta ner det i mindre steg. Fr친ga vad specifikt som 칛r oklart.\n"
                   "- **Svarsanalys:** Bed칬m anv칛ndarens svar. Korrekta svar p친 칬ppna fr친gor ska ber칬mmas och kopplas till n칛sta steg. Vid felaktiga svar p친 slutna fr친gor, ge feedback och st칛ll fr친gan igen (se Feedback-sektion)."
    },
    {
        "title": "Anv칛ndning av Utbildningsplanen",
        "content": "Du ska f칬lja strukturen och t칛cka 칛mnena i den bifogade utbildningsplanen: `{education_plan}`.\n"
                   "**MEN:** Utbildningsplanen 칛r en **disposition/syllabus**, inte en komplett text. Ditt jobb 칛r att **EXPANDERA** p친 varje punkt. F칬rklara begrepp, ge **detaljerade beskrivningar**, anv칛nd **relevanta exempel fr친n v친rden i Sk칬vde kommun** (om m칬jligt), och st칛ll **f칬rdjupande fr친gor**. **Kopiera INTE text rakt av fr친n planen.** F칬lj planens **ordning**."
    },
    {
        "title": "Strikta Formateringsregler f칬r Svar",
        "content": "Detta 칛r **avg칬rande** f칬r att frontend ska fungera korrekt:\n\n"
                   "1.  **Ren Text (Ingen JSON):** F칬r allm칛n information, f칬rklaringar, och **칬ppna fr친gor** (d칛r anv칛ndaren ska skriva ett fritt svar), svara **ENDAST** med ren text (anv칛nd Markdown f칬r formatering som **fetstil** eller punktlistor). Inkludera **INTE** svaret i ett JSON-objekt. Avsluta 칬ppna fr친gor med en tydlig uppmaning som: \"Vad t칛nker du om detta? Skriv ditt svar i rutan nedan.\"\n\n"
                   "2.  **Interaktiva Element (Specifik JSON):** F칬r slutna fr친gor, scenarier, etc., anv칛nd **ENDAST** de **exakta JSON-formaten** nedan, inb칛ddade i ```json ... ``` block. **VIKTIGT:** N칛r du skickar JSON med alternativ/knappar, avsluta **INTE** texten utanf칬r JSON-blocket med \"Skriv ditt svar i rutan nedan\". Uppmana ist칛llet anv칛ndaren att **v칛lja ett alternativ** eller **klicka p친 en knapp**.\n\n"
                   "   **JSON-format (Var extremt noggrann!):**\n"
                   "   - **F칬rslagsknappar (`suggestions`):**\n"
                   "     ```json\n"
                   "     {\n"
                   "       \"suggestions\": {\n"
                   "         \"text\": \"Fr친getext h칛r.\",\n"
                   "         \"options\": [\n"
                   "           {\"label\": \"Knapptext 1\", \"value\": \"V칛rde som skickas vid klick\"},\n"
                   "           {\"label\": \"Knapptext 2\", \"value\": \"Annat v칛rde\"}\n"
                   "         ]\n"
                   "       }\n"
                   "     }\n"
                   "     ```\n"
                   "     *(Anv칛nds f칬r enkla fr친gor, sant/falskt, \"츿r du redo?\", etc. `options`-listan m친ste finnas.)*\n\n"
                   "   - **Scenario (`scenario`):**\n"
                   "     ```json\n"
                   "     {\n"
                   "       \"scenario\": {\n"
                   "         \"title\": \"Scenario Titel\",\n"
                   "         \"description\": \"Beskrivning av situationen... Vad g칬r du?\",\n"
                   "         \"options\": [\n"
                   "           {\"label\": \"Alternativ A\", \"value\": \"optionA\"},\n"
                   "           {\"label\": \"Alternativ B\", \"value\": \"optionB\"}\n"
                   "         ]\n"
                   "         /* Inkludera INTE 'correctOption' eller 'explanation' h칛r */\n"
                   "       }\n"
                   "     }\n"
                   "     ```\n"
                   "     *(`title`, `description`, `options` m친ste finnas.)*\n\n"
                   "   - **Flervalsfr친ga (`multipleChoice`):**\n"
                   "     ```json\n"
                   "     {\n"
                   "       \"multipleChoice\": {\n"
                   "         \"text\": \"Fr친ga (v칛lj ett eller flera).\",\n"
                   "         \"options\": [\n"
                   "           {\"id\": \"A\", \"text\": \"Alternativ 1\", \"isCorrect\": true /* ENDAST F칐R INTERN LOGIK - skicka EJ! */ },\n"
                   "           {\"id\": \"B\", \"text\": \"Alternativ 2\", \"isCorrect\": false /* ENDAST F칐R INTERN LOGIK - skicka EJ! */ }\n"
                   "         ],\n"
                   "         \"multiSelect\": true /* Eller false */\n"
                   "         /* Inkludera INTE 'explanation' h칛r */\n"
                   "       }\n"
                   "     }\n"
                   "     ```\n"
                   "     *(`text`, `options`, `multiSelect` m친ste finnas. Skicka **INTE** med `isCorrect` till frontend!)*\n\n"
                   "   - **Matchningsfr친ga (`matching`):**\n"
                   "     ```json\n"
                   "     {\n"
                   "       \"matching\": {\n"
                   "         \"text\": \"Matcha ihop f칬ljande:\",\n"
                   "         \"items\": [\n"
                   "           {\"id\": \"1\", \"text\": \"Begrepp 1\"},\n"
                   "           {\"id\": \"2\", \"text\": \"Begrepp 2\"}\n"
                   "         ],\n"
                   "         \"matches\": [\n"
                   "           {\"id\": \"A\", \"text\": \"Beskrivning A\" /* 'matchesTo' skickas EJ */},\n"
                   "           {\"id\": \"B\", \"text\": \"Beskrivning B\"}\n"
                   "         ]\n"
                   "       }\n"
                   "     }\n"
                   "     ```\n"
                   "     *(`text`, `items`, `matches` m친ste finnas. Skicka **INTE** `matchesTo` till frontend!)*\n\n"
                   "   - **Ordningsfr친ga (`ordering`):**\n"
                   "     ```json\n"
                   "     {\n"
                   "       \"ordering\": {\n"
                   "         \"text\": \"Placera i r칛tt ordning:\",\n"
                   "         \"items\": [\n"
                   "           {\"id\": \"1\", \"text\": \"Steg A\" /* 'correctPosition' skickas EJ */},\n"
                   "           {\"id\": \"2\", \"text\": \"Steg B\"}\n"
                   "         ]\n"
                   "       }\n"
                   "     }\n"
                   "     ```\n"
                   "     *(`text`, `items` m친ste finnas. Skicka **INTE** `correctPosition` till frontend!)*\n\n"
                   "   - **Rollspel (`roleplay`):**\n"
                   "     ```json\n"
                   "     {\n"
                   "       \"roleplay\": {\n"
                   "         \"title\": \"Rollspelstitel\",\n"
                   "         \"scenario\": \"Kort beskrivning av situationen.\",\n"
                   "         \"dialogue\": [\n"
                   "           {\"role\": \"Roll 1\", \"message\": \"Repli k1\"},\n"
                   "           {\"role\": \"Roll 2\", \"message\": \"Replik 2\"}\n"
                   "         ],\n"
                   "         \"learningPoints\": [\n"
                   "            \"L칛rdom 1\", \"L칛rdom 2\"\n"
                   "          ] /* Valfri men bra */\n"
                   "       }\n"
                   "     }\n"
                   "     ```\n"
                   "     *(`title`, `scenario`, `dialogue` m친ste finnas)*\n\n"
                   "   - **Feedback (`feedback`):**\n"
                   "     ```json\n"
                   "     {\n"
                   "       \"feedback\": {\n"
                   "         \"type\": \"kunskap\" /* eller \"procedur\", \"sakerhet\", etc. */,\n"
                   "         \"userAnswer\": \"Anv칛ndarens felaktiga svar (om k칛nt)\",\n"
                   "         \"message\": \"F칬rklarande feedbacktext.\",\n"
                   "         \"points\": [\n"
                   "           \"Punkt 1\", \"Punkt 2\"\n"
                   "         ],\n"
                   "         \"correctAction\": \"Korrekt agerande/svar.\"\n"
                   "       }\n"
                   "     }\n"
                   "     ```\n"
                   "     *(Anv칛nds f칬r att ge strukturerad feedback efter fel svar. Alla f칛lt 칛r bra att ha med.)*\n\n"
                   "3.  **Inga Andra Format:** Anv칛nd **ALDRIG** format som `{ \"response\": \"text...\" }`. Antingen ren text ELLER ett av de specifika JSON-formaten ovan i ett ```json ... ``` block."
    },
    {
        "title": "Pedagogisk Strategi och Variation",
        "content": "Anv칛nd en **varierad pedagogik** f칬r att h친lla anv칛ndaren engagerad.\n"
                   "- **Informationsblock (Ren Text):** Presentera tydlig information fr친n utbildningsplanen (men **utveckla den**), anv칛nd markdown. 칐verv칛g om en bild passar (se nedan).\n"
                   "- **칐ppna Fr친gor (Ren Text):** St칛ll reflektionsfr친gor som kr칛ver fritextsvar. Be explicit anv칛ndaren skriva i rutan.\n"
                   "- **Scenarier (JSON `scenario`):** Anv칛nd minst 2-3 realistiska v친rdsituationer under kursen.\n"
                   "- **Kunskapsfr친gor (JSON `suggestions`, `multipleChoice`, `matching`, `ordering`):** Testa f칬rst친else och fakta. Variera fr친getyperna!\n"
                   "- **Rollspel (JSON `roleplay`):** Anv칛nd minst 2-3 g친nger f칬r att illustrera kommunikation och processer.\n"
                   "- **Bildanv칛ndning:** N칛r du presenterar information, 칬verv칛g om en bild kan f칬rtydliga. Referera till bilden i texten och anv칛nd markdown-syntax: `![{imageX description}]({imageX})`. Anv칛nd bilderna fr친n listan nedan.\n"
                   "- **Variation:** Undvik att anv칛nda samma metodtyp flera g친nger i rad. Om du just gett information, st칛ll en fr친ga (칬ppen eller sluten). Om du st칛llt en sluten fr친ga, anv칛nd en annan typ n칛sta g친ng."
    },
    {
        "title": "Feedback och Interaktion",
        "content": "- **R칛tt Svar (Sluten Fr친ga):** Bekr칛fta kort, f칬rst칛rk l칛rdomen och g친 vidare i utbildningsplanen.\n"
                   "- **Fel Svar (Sluten Fr친ga):**\n"
                   "    1. Ge tydlig, konstruktiv feedback (anv칛nd JSON `feedback`-formatet).\n"
                   "    2. **Viktigt:** St칛ll **exakt samma fr친ga igen** genom att skicka **samma JSON-block** (`suggestions`, `scenario`, etc.) som du skickade f칬rsta g친ngen.\n"
                   "- **Fritextsvar (칐ppen Fr친ga):** L칛s och kommentera anv칛ndarens svar p친 ett meningsfullt s칛tt. Bekr칛fta f칬rst친else eller st칛ll f칬ljdfr친gor f칬r att f칬rdjupa. Koppla tillbaka till utbildningsplanen.\n"
                   "- **Uppmaning:** Kom ih친g den kontextuella uppmaningen: 'Skriv i rutan...' f칬r 칬ppna fr친gor, 'V칛lj ett alternativ...' f칬r JSON-fr친gor."
    },
    {
        "title": "칐vriga Instruktioner",
        "content": "- **Var Konsekvent:** F칬lj alltid formateringsreglerna och strukturerna.\n"
                   "- **Var Professionell:** Beh친ll din l칛rarpersona. N칛mn **aldrig** att du 칛r en AI eller att du anv칛nder JSON.\n"
                   "- **H친ll Fokus:** Om anv칛ndaren byter 칛mne, styr v칛nligt men best칛mt tillbaka till utbildningen.\n"
                   "- **Avslutning:** N칛r hela utbildningsplanen 칛r genomg친ngen OCH alla fr친gor som anv칛ndaren svarat fel p친 tidigare har repeterats och besvarats korrekt, ge en sammanfattning och tacka anv칛ndaren."
    },
    {
        "title": "Bildresurser:",
        "content": "Tillg칛ngliga bilder (anv칛nd markdown `![beskrivning](nyckel)` syntax i dina svar):\n"
                   "- `{image1}`: Illustrerar SBAR-kommunikation.\n"
                   "- `{image2}`: Beskrivning bild 2.\n"
                   "- `{image3}`: Beskrivning bild 3.\n"
                   "- `{image4}`: Beskrivning bild 4.\n"
                   "- `{image5}`: Beskrivning bild 5.\n"
                   "- `{image6}`: Beskrivning bild 6.\n"
                   "- `{image7}`: Beskrivning bild 7.\n"
                   "- `{image8}`: Beskrivning bild 8.\n"
                   "- `{image9}`: Beskrivning bild 9.\n"
                   "- `{image10}`: Beskrivning bild 10.\n"
                   "- `{image11}`: Beskrivning bild 11.\n"
                   "- `{image12}`: Beskrivning bild 12.\n"
                   "- `{image13}`: Beskrivning bild 13.\n"
                   "- `{image14}`: Beskrivning bild 14."
    }
]

# Bildkonfiguration (of칬r칛ndrad)
BACKEND_BASE_URL = os.getenv('BACKEND_URL', 'http://localhost:10000')
image_assets = {
    "image1": {"url": f"{BACKEND_BASE_URL}/static/images/image1.png", "description": "SBAR-modellen"},
    "image2": { "url": f"{BACKEND_BASE_URL}/static/images/image2.png", "description": "Beskrivning bild 2"},
    "image3": { "url": f"{BACKEND_BASE_URL}/static/images/image3.png", "description": "Beskrivning bild 3"},
    "image4": { "url": f"{BACKEND_BASE_URL}/static/images/image4.png", "description": "Beskrivning bild 4"},
    "image5": { "url": f"{BACKEND_BASE_URL}/static/images/image5.png", "description": "Beskrivning bild 5"},
    "image6": { "url": f"{BACKEND_BASE_URL}/static/images/image6.png", "description": "Beskrivning bild 6"},
    "image7": { "url": f"{BACKEND_BASE_URL}/static/images/image7.png", "description": "Beskrivning bild 7"},
    "image8": { "url": f"{BACKEND_BASE_URL}/static/images/image8.png", "description": "Beskrivning bild 8"},
    "image9": { "url": f"{BACKEND_BASE_URL}/static/images/image9.png", "description": "Beskrivning bild 9"},
    "image10": { "url": f"{BACKEND_BASE_URL}/static/images/image10.png", "description": "Beskrivning bild 10"},
    "image11": { "url": f"{BACKEND_BASE_URL}/static/images/image11.png", "description": "Beskrivning bild 11"},
    "image12": { "url": f"{BACKEND_BASE_URL}/static/images/image12.png", "description": "Beskrivning bild 12"},
    "image13": { "url": f"{BACKEND_BASE_URL}/static/images/image13.png", "description": "Beskrivning bild 13"},
    "image14": { "url": f"{BACKEND_BASE_URL}/static/images/image14.png", "description": "Beskrivning bild 14"},
}

# --- Helper-funktioner (Of칬r칛ndrade fr친n f칬rra versionen) ---
def get_prompt_hash():
    prompt_json = json.dumps(admin_prompt_config, sort_keys=True)
    return hashlib.md5(prompt_json.encode('utf-8')).hexdigest()

def build_background(user_answers):
    text = "Anv칛ndarens bakgrund:\n"
    if user_answers.get('underskoterska', 'nej') == 'ja':
        text += "- Utbildad undersk칬terska.\n"
    else:
        text += "- Annan v친rd- och omsorgspersonal.\n"
    if user_answers.get('delegering', 'nej') == 'ja':
        text += "- Har tidigare erfarenhet av delegering.\n"
    else:
        text += "- Ny inom delegering.\n"
    return text

def load_education_plan():
    try:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(base_dir, "education_plan.txt")
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        logger.error(f"Kunde inte l칛sa utbildningsplanen fr친n {file_path}: {e}")
        return "Utbildningsplan saknas eller kunde inte laddas."

def build_system_instruction(user_answers):
    background_text = build_background(user_answers)
    education_plan_text = load_education_plan()
    instruction_parts = []
    for section in admin_prompt_config:
        content = section["content"]
        if "{background}" in content:
            content = content.replace("{background}", background_text)
        if "{education_plan}" in content:
            content = content.replace("{education_plan}", education_plan_text)
        # Ers칛tt bildplatsh친llare med URL:er
        for key, asset in image_assets.items():
            placeholder = "{" + key + "}"
            replacement = asset['url'] # Skicka bara URL:en till AI:n
            content = content.replace(placeholder, replacement)
        if section["title"]:
            instruction_parts.append(f"### {section['title']}\n{content}") # Anv칛nd H3 f칬r tydlighet
        else:
            instruction_parts.append(content)
    system_instruction = "\n\n".join(instruction_parts)
    # logger.debug(f"Generated System Instruction:\n{system_instruction}") # Avkommentera f칬r att logga hela prompten
    return system_instruction

def build_initial_history(user_answers, user_message, user_name):
    greeting = f"V칛lkommen {user_name} till delegeringsutbildningen!\n"
    greeting += "Jag 칛r din l칛rare, Lexi. Vi ska tillsammans g친 igenom grunderna f칬r **l칛kemedelstilldelning via delegering** f칬r dig som jobbar inom Sk칬vde kommun.\n\n"
    if user_answers.get('underskoterska', 'nej') == 'ja':
        greeting += "Eftersom du 칛r undersk칬terska har du redan en viktig roll. Den h칛r utbildningen kompletterar din kompetens.\n"
    if user_answers.get('delegering', 'nej') == 'ja':
        greeting += "Kul att du har tidigare erfarenhet av delegering! Vissa delar kanske 칛r repetition, men vi ser till att allt sitter.\n"
    else:
        greeting += "Om delegering 칛r nytt f칬r dig, ta det lugnt! Vi g친r igenom allt fr친n grunden.\n"
    greeting += "\nM친let 칛r att du ska k칛nna dig trygg med den teoretiska grunden inf칬r att du m칬ter sjuksk칬terskan f칬r den praktiska delen.\n\n"
    greeting += "Vi kommer anv칛nda chattrutan h칛r nedanf칬r. Ibland f친r du information, ibland fr친gor att svara p친 genom att skriva, och ibland knappar att klicka p친. 츿r du redo att k칬ra ig친ng? 游땕 Skriv 'forts칛tt' n칛r du 칛r redo!"

    history_for_session = [{
        "role": "model",
        "parts": [{"text": greeting}]
    }]
    return greeting, history_for_session

def get_gemini_model(user_answers):
    if not GEMINI_API_KEY:
        raise ValueError("GEMINI_API_KEY 칛r inte definierat.")
    genai.configure(api_key=GEMINI_API_KEY)
    system_instruction_text = build_system_instruction(user_answers)
    model = genai.GenerativeModel(
        model_name='gemini-1.5-flash', # Eller annan modell om du f칬redrar
        system_instruction=system_instruction_text,
        generation_config={
            "temperature": 0.8, # Lite l칛gre temp f칬r mer konsekvent beteende
            "top_p": 0.95,
            "top_k": 64,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        }
    )
    return model

def convert_gemini_history_to_serializable(gemini_history):
    serializable_history = []
    if not gemini_history:
        return serializable_history
    for turn in gemini_history:
        serializable_parts = []
        if hasattr(turn, 'parts') and turn.parts:
            for part in turn.parts:
                if hasattr(part, 'text') and part.text is not None:
                    serializable_parts.append({'text': part.text})
        if serializable_parts:
             # Kontrollera rollen, Gemini API kan ibland returnera 'function' roll etc.
             # Se till att bara 'user' och 'model' sparas om det 칛r det enda vi hanterar.
             role = getattr(turn, 'role', 'unknown').lower()
             if role in ['user', 'model']:
                 serializable_history.append({
                     'role': role,
                     'parts': serializable_parts
                 })
             else:
                  logger.warning(f"Skipping history turn with unhandled role '{role}': {turn}")
        else:
            logger.warning(f"Skipping history turn with no serializable parts: {turn}")
    return serializable_history

# --- Huvud Chat Endpoint ---
@ai_bp.route('/api/chat', methods=['POST'])
def chat():
    data = request.get_json()
    # H칛mta user_answers fr친n sessionen om den finns, annars fr친n request (f칬rsta anropet)
    # Detta g칬r att vi inte beh칬ver skicka med answers i varje chattanrop fr친n frontend
    chat_context = session.get('chat_context', {})
    user_answers = chat_context.get('user_answers', data.get('answers', {}))
    user_message = data.get('message', '')
    user_name = data.get('name', 'Anv칛ndare') # Beh칬vs f칬r h칛lsning

    if not user_message:
        return jsonify({"error": "Message cannot be empty"}), 400

    try:
        current_hash = get_prompt_hash()
        chat_session_obj = None

        # --- Session Management ---
        # 'chat_context' h칛mtades i b칬rjan av funktionen

        if chat_context and chat_context.get('hash') == current_hash:
            logger.info(f"Existing session context found.")
            retrieved_history = chat_context.get('history', [])
            if not retrieved_history and user_message.strip().lower() != "start":
                 logger.warning("Session context found, but history was empty. Re-initializing.")
                 chat_context = {} # Nollst칛ll f칬r att skapa nytt
            else:
                 try:
                     # Anv칛nd sparade user_answers fr친n sessionen n칛r modellen 친terskapas
                     model = get_gemini_model(user_answers)
                     chat_session_obj = model.start_chat(history=retrieved_history)
                     logger.info(f"Recreated chat session from history (length: {len(retrieved_history)}).")
                 except Exception as model_err:
                      logger.error(f"Error recreating Gemini model/session: {model_err}", exc_info=True)
                      chat_context = {} # Nollst칛ll
        else:
            if not chat_context:
                logger.info("No session context found. Creating new one.")
            else:
                logger.info(f"Prompt hash changed. Creating new session.")
            session.pop('chat_context', None) # Rensa gammal context helt
            chat_context = {} # Markera f칬r att skapa ny

        # Skapa ny session om ingen giltig hittades/친terskapades
        if not chat_session_obj: # Om chat_session_obj inte skapades ovan
            logger.info("Initializing new chat session.")
            # Spara user_answers i den nya kontexten direkt
            chat_context['user_answers'] = data.get('answers', {})
            user_answers = chat_context['user_answers'] # Uppdatera lokala variabeln ocks친

            initial_greeting, initial_history_serializable = build_initial_history(user_answers, user_message, user_name)
            chat_context['history'] = initial_history_serializable
            chat_context['hash'] = current_hash

            if user_message.strip().lower() == "start":
                session['chat_context'] = chat_context
                session.modified = True
                logger.info("Stored initial context (answers, history, hash) for 'start' message.")
                # Parse greeting (osannolikt med JSON men f칬r s칛kerhets skull)
                parsed_greeting = parse_ai_response(initial_greeting)
                interactive_element = None
                if parsed_greeting.get("interactiveJson") and isinstance(parsed_greeting["interactiveJson"], dict):
                     for key in parsed_greeting["interactiveJson"]:
                         if key in INTERACTIVE_KEYS:
                             interactive_element = {"type": INTERACTIVE_KEYS[key], "data": parsed_greeting["interactiveJson"]}
                             break
                return jsonify({"reply": {"textContent": parsed_greeting["textContent"],"interactiveElement": interactive_element}})
            else:
                # Om det inte var 'start' men vi skapar nytt (t.ex. hash칛ndring)
                try:
                    model = get_gemini_model(user_answers)
                    chat_session_obj = model.start_chat(history=initial_history_serializable)
                    session['chat_context'] = chat_context # Spara den redan skapade kontexten
                    session.modified = True
                    logger.info("Stored initial context for new session (non-start message).")
                except Exception as model_err:
                     logger.error(f"Error starting initial Gemini session: {model_err}", exc_info=True)
                     return jsonify({"reply": {"textContent": "Kunde inte initiera chattsessionen.", "interactiveElement": None}}), 500

        # --- Generera AI-svar ---
        if not chat_session_obj:
             logger.error("Chat session object is unexpectedly None.")
             return jsonify({"reply": {"textContent": "Ett ov칛ntat sessionsfel intr칛ffade.", "interactiveElement": None}}), 500

        logger.info(f"Sending message to Gemini: '{user_message[:50]}...'")
        # Skicka meddelandet till den (친ter)skapade sessionen
        response = chat_session_obj.send_message(content=user_message)

        # Extrahera AI-svar
        ai_reply_raw = ""
        try:
            # F칬rs칬k extrahera text fr친n svaret (prioritera .text)
            if hasattr(response, 'text') and response.text is not None:
                 ai_reply_raw = response.text
            elif hasattr(response, 'parts') and response.parts:
                 text_parts = [part.text for part in response.parts if hasattr(part, 'text') and part.text]
                 ai_reply_raw = "\n".join(text_parts).strip()
            else:
                 logger.warning(f"Unexpected response structure from Gemini: {response}")
                 ai_reply_raw = "Jag kunde inte generera ett svar just nu."
            if not ai_reply_raw: ai_reply_raw = "" # S칛kerst칛ll att det 칛r en str칛ng
        except Exception as extract_err:
             logger.error(f"Error extracting text from Gemini response: {extract_err}")
             ai_reply_raw = "Ett internt fel uppstod vid bearbetning av svaret."

        logger.info(f"Received raw reply from Gemini: '{ai_reply_raw[:100]}...'")

        # --- Uppdatera historiken i sessionen ---
        updated_history_gemini = chat_session_obj.history
        serializable_history = convert_gemini_history_to_serializable(updated_history_gemini)
        # Uppdatera historiken OCH beh친ll user_answers och hash i sessionen
        session['chat_context']['history'] = serializable_history
        # User_answers och hash beh칬ver inte uppdateras om de inte 칛ndrats, men det skadar inte
        session['chat_context']['user_answers'] = user_answers
        session['chat_context']['hash'] = current_hash
        session.modified = True
        logger.info(f"Updated session history (length: {len(serializable_history)}). Context saved.")

    except ValueError as ve: # T.ex. saknad API-nyckel
        logger.error(f"Configuration error: {ve}")
        return jsonify({"reply": {"textContent": "Ett konfigurationsfel intr칛ffade.", "interactiveElement": None}}), 500
    except redis.exceptions.ConnectionError as redis_err:
         logger.error(f"Redis connection error: {redis_err}", exc_info=True)
         session.pop('chat_context', None) # F칬rs칬k rensa f칬r att undvika problem
         return jsonify({"reply": {"textContent": "Problem med anslutning till sessionen. F칬rs칬k igen.", "interactiveElement": None}}), 503
    except Exception as e:
        logger.error(f"Error during chat processing: {e}", exc_info=True)
        return jsonify({"reply": {"textContent": "Urs칛kta, ett ov칛ntat problem uppstod.", "interactiveElement": None}}), 500

    # --- Parsa och returnera svar ---
    parsed_response = parse_ai_response(ai_reply_raw)
    logger.info(f"Parsed response. Text: '{parsed_response['textContent'][:100]}...', JSON found: {parsed_response['interactiveJson'] is not None}")

    interactive_element_response = None
    if parsed_response["interactiveJson"]:
        interactive_type = None
        # Verifiera att det 칛r en dict innan vi itererar
        if isinstance(parsed_response["interactiveJson"], dict):
            for key in parsed_response["interactiveJson"]:
                if key in INTERACTIVE_KEYS:
                    interactive_type = INTERACTIVE_KEYS[key]
                    break
        # Annars logga ett fel om JSON hittades men inte var en dict
        elif parsed_response["interactiveJson"] is not None:
             logger.warning(f"Found JSON block, but it was not a dictionary: {type(parsed_response['interactiveJson'])}")

        if interactive_type:
            # H칛r b칬r vi ocks친 validera att den n칬dv칛ndiga datastrukturen finns
            # f칬r den givna typen, men det blir mer komplext. Vi litar p친 prompten f칬r nu.
            interactive_element_response = {
                "type": interactive_type,
                "data": parsed_response["interactiveJson"]
            }
        # Om JSON hittades men ingen k칛nd nyckel fanns
        elif parsed_response["interactiveJson"] is not None:
            logger.warning(f"Parsed JSON did not contain a known interactive key: {list(parsed_response['interactiveJson'].keys()) if isinstance(parsed_response['interactiveJson'], dict) else 'N/A'}")

    final_response = {
        "reply": {
            "textContent": parsed_response["textContent"],
            "interactiveElement": interactive_element_response
        }
    }

    return jsonify(final_response)


# Lokal k칬rning (of칬r칛ndrad)
if __name__ == '__main__':
    from flask import Flask
    from flask_cors import CORS
    from flask_session import Session
    import redis

    app = Flask(__name__)

    # --- Local Dev Session Config ---
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'local-dev-secret')
    local_redis_url = os.getenv('REDIS_URL')
    session_config_type = 'filesystem' # Default
    if local_redis_url:
        try:
            app.config['SESSION_TYPE'] = 'redis'
            app.config['SESSION_REDIS'] = redis.from_url(local_redis_url)
            app.config['SESSION_REDIS'].ping() # Test connection
            session_config_type = 'redis'
            print("--- LOCAL DEV: Using REDIS sessions ---")
        except Exception as local_redis_err:
            print(f"--- LOCAL DEV: Failed to connect to Redis ({local_redis_url}), using filesystem sessions: {local_redis_err} ---")
            app.config['SESSION_TYPE'] = 'filesystem'
    else:
        print("--- LOCAL DEV: REDIS_URL not set, using filesystem sessions ---")
        app.config['SESSION_TYPE'] = 'filesystem'

    if app.config['SESSION_TYPE'] == 'filesystem':
         app.config['SESSION_FILE_DIR'] = './.flask_session/'
         if not os.path.exists('./.flask_session'):
             os.makedirs('./.flask_session')

    # S칛tt cookie-inst칛llningar 칛ven f칬r lokal k칬rning (anpassa vid behov)
    app.config['SESSION_COOKIE_SECURE'] = False # F칬r localhost HTTP
    app.config['SESSION_COOKIE_HTTPONLY'] = True
    app.config['SESSION_COOKIE_SAMESITE'] = 'Lax' # Lax 칛r ok f칬r localhost
    app.config['SESSION_COOKIE_PATH'] = '/'
    app.config['SESSION_COOKIE_DOMAIN'] = None # Bind till localhost

    Session(app)
    # --------------------------------

    CORS(app, supports_credentials=True, origins=["http://localhost:3000"]) # Endast localhost f칬r lokal k칬rning
    app.register_blueprint(ai_bp)

    @app.route('/static/<path:path>')
    def serve_static_local(path):
        static_dir = os.path.join(os.path.dirname(__file__), 'static')
        return send_from_directory(static_dir, path)

    port = int(os.environ.get('PORT', 10000))
    static_images_dir_local = os.path.join(os.path.dirname(__file__), 'static', 'images')
    if not os.path.exists(static_images_dir_local):
         os.makedirs(static_images_dir_local, exist_ok=True)

    print(f"Starting development server on http://localhost:{port}") # 츿ndrat till localhost
    app.run(host='0.0.0.0', port=port, debug=True, threaded=False, processes=1)
